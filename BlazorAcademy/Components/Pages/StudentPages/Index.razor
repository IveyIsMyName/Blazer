@page "/students"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorAcademy.Models
@using BlazorAcademy.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BlazorAcademy.Data.BlazorAcademyContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="students/create">Create New</a>
</p>

<QuickGrid Class="table" Items="students" Pagination="@paginationState">
    <PropertyColumn Title="Группа" Property="@(s => s.group)" Sortable="true" />
    <PropertyColumn Title="Фамилия" Property="@(s => s.last_name)" Sortable="true" />
    <PropertyColumn Title="Имя" Property="@(s => s.first_name)" Sortable="true" />
    <PropertyColumn Title="Отчество" Property="@(s => s.middle_name)" Sortable="true" />
    <TemplateColumn Title="Дата Рождения" Sortable="true">
        <div>@FormatBirthDate(context.birth_date)</div>
    </TemplateColumn>
    <PropertyColumn Title="E-mail" Property="@(s => s.email)" Sortable="true" />
    <PropertyColumn Title="Телефон" Property="@(s => s.phone)" Sortable="true" />
    <PropertyColumn Title="Фото" Property="@(s => s.photo)" Sortable="true" />

    <TemplateColumn>
        <a href="@($"students/edit?stud_id={context.stud_id}")">Edit</a> |
        <a href="@($"students/details?stud_id={context.stud_id}")">Details</a> |
        <a href="@($"students/delete?stud_id={context.stud_id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

<Paginator State="@paginationState" />

@code {
    private BlazorAcademyContext context = default!;
    private PaginationState paginationState = new() { ItemsPerPage = 10 };
    private IQueryable<Student>? studentsQuery;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        studentsQuery = context.Students.AsQueryable();
    }

    // Вычисляемое свойство для пагинированных данных
    private IQueryable<Student> students => studentsQuery?
        .Skip(paginationState.CurrentPageIndex * paginationState.ItemsPerPage)
        .Take(paginationState.ItemsPerPage) ?? Array.Empty<Student>().AsQueryable();

    // Метод для форматирования даты в формат YYYY.MM.DD
    private string FormatBirthDate(DateOnly birthDate)
    {
        return birthDate.ToString("yyyy.MM.dd");
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}